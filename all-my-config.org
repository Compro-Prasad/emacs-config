#+TITLE: All My Emacs Configurations
#+AUTHOR: Compro Prasad

* Internals
These customizations don’t require any external dependency and can be
used with bare Emacs *25.3*.
** User details
Emacs should always know who you are and how to contact with the outside world.
#+BEGIN_SRC emacs-lisp -i
  (setq user-mail-address "comproprasad@gmail.com"
        user-full-name "Abhishek(Compro) Prasad")
#+END_SRC

** Convert =yes= to =y= and =no= to =n=
Its really annoying when Emacs asks for *yes* / *no* every now and then. So,
better convert that to simple *y* / *n*.
#+BEGIN_SRC emacs-lisp -i
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Separate file for auto Emacs customizations
Emacs litters =init-el= with =M-x= =customize= settings. So, I chose a
separate bin for this purpose.
#+BEGIN_SRC emacs-lisp -i
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file)
#+END_SRC

** Load git tokens
#+BEGIN_SRC emacs-lisp -i
  (if (file-readable-p "~/.git-tokens")
      (load-file "~/.git-tokens"))
#+END_SRC

** Get support for all characters
Emacs shows weird characters if =utf-8= isn't enabled.
#+BEGIN_SRC emacs-lisp -i
  (set-language-environment 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-selection-coding-system 'utf-8)
  (set-locale-environment "en.UTF-8")
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  (setq buffer-file-coding-system 'utf-8)
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT_STRING))
#+END_SRC

** Way to learn to use Emacs keybindings
It will do near about the same thing but its not what you wanted to happen.
So, its easier to use C-p, C-n, C-b and C-f in this case.
#+BEGIN_SRC emacs-lisp -i
  (defun use-emacs-keybindings ()
    "Set up, down, left and right keys to scroll text instead of
  move the cursor."
    (interactive)
    (global-set-key [up] '(lambda () (interactive) (scroll-down 1)))
    (global-set-key [down] '(lambda () (interactive) (scroll-up 1)))
    (global-set-key [left] '(lambda () (interactive) (scroll-right 1)))
    (global-set-key [right] '(lambda () (interactive) (scroll-left 1))))
  (defun use-normal-keybindings ()
    "Set up, down, left and right keys to move the cursor instead
  of scrolling the text."
    (interactive)
    (global-set-key [up] 'previous-line)
    (global-set-key [down] 'next-line)
    (global-set-key [left] 'backward-char)
    (global-set-key [right] 'forward-char))
  (use-emacs-keybindings)
#+END_SRC

** Font setting
Everybody likes this, so do I. Make sure you have it installed in your
system. [[https://fonts.google.com/download?family=Source%20Code%20Pro][Click here to download Source Code Pro font pack]].
#+BEGIN_SRC emacs-lisp -i
  (set-frame-font "Source Code Pro-12")
#+END_SRC

** Hide basic UI components
#+BEGIN_SRC emacs-lisp -i
  (menu-bar-mode 0)
  (tool-bar-mode 0)
  (menu-bar-no-scroll-bar)
  (blink-cursor-mode -1)
#+END_SRC

** Mode line customization
#+BEGIN_SRC emacs-lisp -i
  (column-number-mode 1)
#+END_SRC

** Overwrite marked regions
Emacs by default writes character even if a region is marked instead
of deleting the whole region and replacing it with the character you
typed or pasted.
#+BEGIN_SRC emacs-lisp -i
  (delete-selection-mode 1)
#+END_SRC

** Unicode comments if in normal text region/buffer
#+BEGIN_SRC emacs-lisp -i
  (electric-quote-mode t)
#+END_SRC

** Subword Mode
Jumps per word. If this is disabled Emacs would jump to the next word separated
by whitespace(s). But enabling this allows me to jump words separated by other
punctuation too. Its slower but it fits my needs.
#+BEGIN_SRC emacs-lisp -i
  (setq global-subword-mode t)
#+END_SRC

** Xterm/Terminal mouse support
Enables mouse support if Emacs is initialized/opened from terminal.
#+BEGIN_SRC emacs-lisp -i
  (if (not window-system)
      (xterm-mouse-mode 1)
    (xterm-mouse-mode 0))
#+END_SRC

** Maximize Emacs Frame
By default, Emacs opens up in a small window. So, its better to make it
full screen.
#+BEGIN_SRC emacs-lisp -i
  (toggle-frame-maximized)
  (toggle-frame-fullscreen)
#+END_SRC

** No tabs. Only spaces.
#+BEGIN_SRC emacs-lisp -i
  (setq-default indent-tabs-mode nil)
#+END_SRC

** Pair(like quotes & brackets) completion
#+BEGIN_SRC emacs-lisp -i
  (electric-pair-mode 1)
#+END_SRC

** Enable features
Some features are by default disabled in Emacs to prevent a bad user experience
if you don't know about that specific feature.
#+BEGIN_SRC emacs-lisp -i
  (put 'upcase-region 'disabled nil)
  (put 'narrow-to-region 'disabled nil)
  (put 'erase-buffer 'disabled nil)
  (put 'downcase-region 'disabled nil)
#+END_SRC

** ERC (Emacs IRC)
#+BEGIN_SRC emacs-lisp -i
  (use-package erc
    :ensure t :defer t
    :config
    (setq erc-hide-list '("PART" "QUIT" "JOIN")
          erc-server "irc.freenode.net"
          erc-nick "compro"))
#+END_SRC

** =imenu= - Jump to an identifier
Like modern IDEs there is an option to jump to global identifiers in
Emacs too.
#+BEGIN_SRC emacs-lisp -i
  (use-package imenu
    :ensure t :defer t
    :bind ("<C-S-mouse-1>" . imenu))
#+END_SRC

** Auto refresh buffers when files change
#+BEGIN_SRC emacs-lisp -i
  (global-auto-revert-mode t)
#+END_SRC

** Speedup display of characters
#+BEGIN_SRC emacs-lisp -i
(setq inhibit-compacting-font-caches t)
#+END_SRC

** Highlight Parenthesis
#+BEGIN_SRC emacs-lisp -i
  (show-paren-mode t)
#+END_SRC

** Right click on selection
#+BEGIN_SRC emacs-lisp -i
  (define-key global-map [mouse-3] menu-bar-edit-menu)
#+END_SRC

** Set region colors
#+BEGIN_SRC emacs-lisp -i
  (set-face-attribute 'region nil
                      :background "pale turquoise"
                      :distant-foreground "gtk_selection_fg_color")
#+END_SRC

** Decreace frequency of GC
#+BEGIN_SRC emacs-lisp -i
(setq gc-cons-threshold 100000000)
#+END_SRC

** Org mode configurations
#+BEGIN_SRC emacs-lisp -i
  (add-hook 'org-mode-hook 'org-indent-mode)
#+END_SRC

* Externals (plugins)
These are customizations that require internet access to download and
install emacs lisp extensions.
** Some good themes
#+BEGIN_SRC emacs-lisp -i
  (use-package monokai-theme :ensure t :defer t)
  (use-package solarized-theme :ensure t :defer t)
  (use-package ahungry-theme :ensure t :defer t)
  (use-package zenburn-theme :ensure t :defer t)
  (use-package spacemacs-theme :ensure t :defer t)
#+END_SRC

** Helm - Autocomplete emacs commands and other stuff
#+BEGIN_SRC emacs-lisp -i
  (use-package helm
    :ensure t :defer t
    :bind (("M-x" . helm-M-x)
           ([f8] . helm-find-files)
           ([f9] . helm-buffers-list))
    :config
    (require 'helm-config)
    (helm-mode 1)
    (setq helm-M-x-fuzzy-match t))
#+END_SRC

** =yasnippet= - TextMate like snippets
#+BEGIN_SRC emacs-lisp -i
  (use-package yasnippet
    :ensure t :defer t
    :init
    (use-package yasnippet-snippets
      :ensure t
      :defer t)
    (yas-global-mode 1))
#+END_SRC
+ Authors:
  - pluskid <pluskid@gmail.com>
  - João Távora <joaotavora@gmail.com>
  - Noam Postavsky <npostavs@gmail.com>
+ Maintainer: Noam Postavsky <npostavs@gmail.com>
** =rtags= - For CMake projects
#+BEGIN_SRC emacs-lisp -i
  (use-package ggtags
    :ensure t :defer t
    :hook (c++-mode c-mode java-mode go-mode))
#+END_SRC

** =magit= - Git Porcelain
#+BEGIN_SRC emacs-lisp -i
  (use-package magit
    :ensure t :defer t
    :bind ("C-x g" . magit-status))
#+END_SRC

** Hungry Deletion
Hungry delete is only present in =cc-mode=. What about other
modes. Thus this package from [[https://github.com/nflath][Nathaniel Flath]].
#+BEGIN_SRC emacs-lisp -i
  (use-package hungry-delete
    :ensure t :defer t
    :init
    (global-hungry-delete-mode 1))
#+END_SRC

** Web mode
The one and only package which understands a wide range of liquid
templates from [[https://github.com/fxbois][fxbois]].
#+BEGIN_SRC emacs-lisp -i
  (use-package web-mode
    :ensure t :defer t
    :mode "\\.html\\'")
#+END_SRC

** Expand region
The region auto completion without the need of a mouse from [[https://github.com/magnars][Magnar
Sveen]].
#+BEGIN_SRC emacs-lisp -i
  (use-package expand-region
    :ensure t :defer t
    :bind (("C-=" . er/expand-region)
           ("C-+" . er/contract-region)))
#+END_SRC

** Project management using =projectile=
The best ever project management tool in Emacs from [[https://github.com/bbatsov/][Bozhidar Batsov]].
#+BEGIN_SRC emacs-lisp -i
  (use-package projectile
    :ensure t :defer t
    :bind-keymap ("C-c p" . projectile-command-map)
    :init
    (use-package helm-projectile
      :ensure t
      :defer t
      :init
      (helm-projectile-on))
    :config
    (projectile-mode 1))
#+END_SRC

** Complete anything(=company=)
The code completion framework that is easy to work with.
#+BEGIN_SRC emacs-lisp -i
  (use-package company
    :ensure t :defer t)
#+END_SRC

** C/C++ completion
#+BEGIN_SRC emacs-lisp -i
  (use-package company-irony
    :ensure t :defer t
    :init
    (global-company-mode 1))
#+END_SRC

** Better window switching
By default it is tedious to switch windows using =C-x o= repeatedly.
#+BEGIN_SRC emacs-lisp -i
  (use-package ace-window
    :ensure t :defer t
    :bind ("M-o" . ace-window))
#+END_SRC

** Auto completion for keyboard shortcuts
We all know Emacs has many weird shortcuts. This package from [[https://github.com/justbur][Justin
Burkett]] solves this problem.
#+BEGIN_SRC emacs-lisp -i
  (use-package which-key
    :ensure t :defer t
    :init
    (which-key-mode 1))
#+END_SRC

** TODO Tabs?
Here it is from [[https://github.com/Alexander-Miller][Alexander Miller]].
#+BEGIN_SRC emacs-lisp -i

#+END_SRC

** Sidebar containing project
Good for browsing through a project from [[https://github.com/Alexander-Miller][Alexander Miller]].
#+BEGIN_SRC emacs-lisp -i
  (use-package treemacs-projectile
    :ensure t :defer t
    :bind (([f5] . treemacs)
           ([f6] . treemacs-projectile)))
#+END_SRC

** Multiple cursors is here too
#+BEGIN_SRC emacs-lisp -i
  (use-package multiple-cursors
    :ensure t :defer t
    :bind (("M-/" . mc--mark-symbol-at-point)
           ("C-S-c" . mc/edit-lines)
           ("M-S-<up>" . mc/mark-previous-like-this)
           ("M-<up>" . mc/skip-to-previous-like-this)
           ("M-S-<down>" . mc/mark-next-like-this)
           ("M-<down>" . mc/skip-to-next-like-this)
           ("C-c C-<" . mc/mark-all-like-this)
           ("M-S-<mouse-1>" . mc/add-cursor-on-click)
           ("M-S-<mouse-2>" . mc/add-cursor-on-click)
           ("M-S-<mouse-3>" . mc/add-cursor-on-click)))
#+END_SRC
/Author: Magnar Sveen <magnars@gmail.com>/

** Rename identifiers in a buffer
#+BEGIN_SRC emacs-lisp -i
  (use-package iedit
    :ensure t :defer t)
#+END_SRC
